'use strict';

const form = document.querySelector('.form');
const containerWorkouts = document.querySelector('.workouts');
const inputType = document.querySelector('.form__input--type');
const inputDistance = document.querySelector('.form__input--distance');
const inputDuration = document.querySelector('.form__input--duration');
const inputTemp = document.querySelector('.form__input--temp');
const inputClimb = document.querySelector('.form__input--climb');

class Workout {
  date = new Date();
  id = (Date.now() + '').slice(-10);

  clickNumber = 0;

  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance; // km
    this.duration = duration; // min
  }

  // prettier-ignore
  _setDescription() {
    this.type === 'running'
      ? (this.description = `–ü—Ä–æ–±–µ–∂–∫–∞ ${new Intl.DateTimeFormat('Ru-ru').format(this.date)}`)
      : (this.description = `–í–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ${new Intl.DateTimeFormat('Ru-ru').format(this.date)}`);
  }

  click() {
    this.clickNumber++;
  }
}

class Running extends Workout {
  type = 'running';

  constructor(coords, distance, duration, temp) {
    super(coords, distance, duration);
    this.temp = temp;

    this.calculatePace();
    this._setDescription();
  }

  calculatePace() {
    this.pace = this.duration / this.distance; // min/km
  }
}

class Cycling extends Workout {
  type = 'cycling';

  constructor(coords, distance, duration, climb) {
    super(coords, distance, duration);
    this.climb = climb;

    this.calculateSpeed();
    this._setDescription();
  }

  calculateSpeed() {
    this.speed = (this.distance / this.duration) * 60; // km/h
  }
}

class App {
  #map;
  #mapEvent;
  #workouts = [];

  constructor() {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this._getPosition();

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
    this._getLocalStorageData();

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏—è

    form.addEventListener('submit', this._newWorkout.bind(this));

    // –ú–µ–Ω—è–µ–º –ø–æ–ª–µ –¢–µ–º–ø –Ω–∞ –ü–æ–¥—ä–µ–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –í–µ–ª–æ—Å–∏–ø–µ–¥
    inputType.addEventListener('change', this._toggleClimbField);

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫–∞—Ä—Ç—ã –∫ –º–∞—Ä–∫–µ—Ä—É –ø–æ –∫–ª–∏–∫—É –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    containerWorkouts.addEventListener('click', this._moveToWorkout.bind(this));
  }

  _getPosition() {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),

        function () {
          alert('–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
        }
      );
    }
  }

  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    const coords = [latitude, longitude];

    this.#map = L.map('map').setView(coords, 15);

    L.tileLayer('https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png', {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this.#map);

    L.marker(coords)
      .addTo(this.#map)
      .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
      .openPopup();

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
    this.#map.on('click', this._showForm.bind(this));

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–∑ localStorage –Ω–∞ –∫–∞—Ä—Ç–µ
    this.#workouts.forEach(workout => {
      this._displayWorkout(workout);
    });
  }

  _showForm(e) {
    // **
    this.#mapEvent = e; // **
    form.classList.remove('hidden');
    inputDistance.focus();
  }

  _hideForm() {
    // prettier-ignore
    inputClimb.value = inputDistance.value = inputDuration.value = inputTemp.value = '';
    form.classList.add('hidden');
  }

  _toggleClimbField() {
    inputClimb.closest('.form__row').classList.toggle('form__row--hidden');
    inputTemp.closest('.form__row').classList.toggle('form__row--hidden');
  }

  _newWorkout(e) {
    const areNumbers = (...numbers) =>
      numbers.every(num => Number.isFinite(num));

    const areNumbersPositive = (...numbers) => numbers.every(num => num > 0);

    e.preventDefault();

    // console.log(mapEvent); // —Å–æ–¥–µ—Ä–∂–∏—Ç latlng: v {lat: 43.5696294867803, lng: 39.76277768611909} // –æ—Ç latitulde, longitude

    const { lat, lng } = this.#mapEvent.latlng; // –ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    let workout;

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;

    if (type === 'running') {
      const temp = +inputTemp.value;
      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      if (
        !areNumbers(distance, duration, temp) ||
        !areNumbersPositive(distance, duration, temp)
      )
        return alert('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ'); // guard clause - –¢–æ–∂–µ —Ç—Ä–µ–Ω–¥ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ JS

      workout = new Running([lat, lng], distance, duration, temp);
    }

    // –ï—Å–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≤–µ–ª–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π, —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç Cycling
    if (type === 'cycling') {
      const climb = +inputClimb.value;
      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
      if (
        !areNumbers(distance, duration, climb) ||
        !areNumbersPositive(distance, duration)
      )
        return alert('–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ');

      workout = new Cycling([lat, lng], distance, duration, climb);
    }

    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this.#workouts.push(workout);

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ
    this._displayWorkout(workout);

    // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Å–ø–∏—Å–∫–µ
    this._displayWorkoutOnSidebar(workout);

    // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É
    this._hideForm();

    // –î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    this._addWorkoutsToLocalStorage();
  }

  // prettier-ignore
  _displayWorkout(workout) {
    L.marker(workout.coords)
      .addTo(this.#map)
      .bindPopup(
        L.popup({
          maxWidth: 200,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: `${workout.type}-popup`,
        })
      )
      .setPopupContent(`${workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'} ${workout.description}`)
      .openPopup();
  }

  // prettier-ignore
  _displayWorkoutOnSidebar(workout) {
    let html = `
      <li class="workout workout--${workout.type}" data-id="${workout.id}">
        <h2 class="workout__title">${workout.description}</h2>
        <div class="workout__details">
          <span class="workout__icon">${workout.type === 'running' ? 'üèÉ' : 'üöµ‚Äç‚ôÇÔ∏è'}</span>
          <span class="workout__value workout__value--distance">${workout.distance}</span>
          <span class="workout__unit">–∫–º</span>
        </div>
        <div class="workout__details">
          <span class="workout__icon">‚è±</span>
          <span class="workout__value workout__value--duration">${workout.duration}</span>
          <span class="workout__unit">–º–∏–Ω</span>
        </div>
        `;

    if (workout.type === 'running') {
      html += `
          <div class="workout__details">
            <span class="workout__icon">üìè‚è±</span>
            <span class="workout__value workout__value--pace">${workout.pace.toFixed(2)}</span>
            <span class="workout__unit">–º/–º–∏–Ω</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">üëü‚è±</span>
            <span class="workout__value workout__value--temp">${workout.temp}</span>
            <span class="workout__unit">—à–∞–≥/–º–∏–Ω</span>
          </div>
          <div class="workout__btns">
            <button class="workout-btn workout__edit-btn">Edit</button>
            <button class="workout-btn workout__delete-btn">Remove</button>
          </div>
        </li>
        
      `;
    }
    if (workout.type === 'cycling') {
      html += `
            <div class="workout__details">
            <span class="workout__icon">üìè‚è±</span>
            <span class="workout__value workout__value--speed">${workout.speed.toFixed(2)}</span>
            <span class="workout__unit">–∫–º/—á</span>
          </div>
          <div class="workout__details">
            <span class="workout__icon">üèî</span>
            <span class="workout__value workout__value--climb">${workout.climb}</span>
            <span class="workout__unit">–º</span>
          </div>
          <div class="workout__btns">
            <button class="workout-btn workout__edit-btn">Edit</button>
            <button class="workout-btn workout__delete-btn">Remove</button>
          </div>
        </li>
      `;
    }

    form.insertAdjacentHTML('afterend', html);
  }

  _moveToWorkout(e) {
    const workoutElement = e.target.closest('.workout');
    // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –≤–Ω–µ —ç–ª–µ–º–µ–Ω—Ç–∞ workout, –º—ã –ø–æ–ª—É—á–∏–º null, –Ω–∞–º –Ω–∞–¥–æ —Ç–∞–∫–∏–µ –∫–ª–∏–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    if (!workoutElement) return;

    // prettier-ignore
    const workout = this.#workouts.find(item => item.id === workoutElement.dataset.id)

    this.#map.setView(workout.coords, 15, {
      animate: true,
      pan: { duration: 1 },
    });

    // –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–Ω–æ–ø–æ–∫, –∫–∞–∫ —Ä–∞–∑ —É–¥–æ–±–Ω–æ, –∫–æ–≥–¥–∞ –∫–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
    this._workoutBtnClickProcessing(e);
  }

  //
  //
  //
  //
  //
  //
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  #workoutElem; // –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–Ω–æ–ø–∫—É –∫–æ—Ç–æ—Ä–æ–π –∫–ª–∏–∫–Ω—É–ª–∏ _buttonClickProcessing()

  _workoutBtnClickProcessing(e) {
    if (!e.target.classList.contains('workout-btn')) return;

    this.#workoutElem = e.target.closest('.workout');

    if (e.target === this.#workoutElem.querySelector('.workout__edit-btn')) {
      this._editWorkout(e);
    }
    if (e.target === this.#workoutElem.querySelector('.workout__delete-btn')) {
      this._removeWorkout();
    }
  }

  _editWorkout(e) {
    // We edit the ${this.#workoutElem.dataset.id} workout

    // –ø–æ–ª—É—á–∏—Ç—å localStorage, –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    const workoutsJSON = JSON.parse(localStorage.getItem('workouts'));
    // prettier-ignore
    const workoutJSON = workoutsJSON.find(el => el.id === this.#workoutElem.dataset.id)
    // console.log(workoutJSON);

    // –£–¥–∞–ª–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // prettier-ignore
    const workoutDetails = this.#workoutElem.querySelectorAll('.workout__details');
    workoutDetails.forEach(detail => detail.remove());

    console.log(e.target.closest('.workout').querySelector('.workout__title'));
    e.target
      .closest('.workout')
      .querySelector('.workout__title')
      .insertAdjacentHTML(
        'afterend',
        `<form class="form">
      <div class="form__row">
        <label class="form__label">–¢–∏–ø</label>
        <select class="form__input form__input--type">
          <option value="running">–ü—Ä–æ–±–µ–∂–∫–∞</option>
          <option value="cycling">–í–µ–ª–æ—Å–∏–ø–µ–¥</option>
        </select>
      </div>
      <div class="form__row">
        <label class="form__label">–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ</label>
        <input class="form__input form__input--distance" placeholder="km" />
      </div>
      <div class="form__row">
        <label class="form__label">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</label>
        <input class="form__input form__input--duration" placeholder="–º–∏–Ω" />
      </div>
      <div class="form__row">
        <label class="form__label">–¢–µ–º–ø</label>
        <input class="form__input form__input--temp" placeholder="—à–∞–≥/–º–∏–Ω" />
      </div>
      <div class="form__row form__row--hidden">
        <label class="form__label">–ü–æ–¥—ä—ë–º</label>
        <input class="form__input form__input--climb" placeholder="–º–µ—Ç—Ä–æ–≤" />
      </div>
      <button class="form__btn">OK</button>
    </form>`
      );

    e.target.closest('.workout').style.display = 'block';
    e.target.closest('.workout').querySelector(form).style.paddingLeft = '0px';

    // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    // const classToKeyMap = {
    //   'workout__value--distance': 'distance',
    //   'workout__value--duration': 'duration',
    //   'workout__value--pace': 'pace',
    //   'workout__value--temp': 'temp',
    //   'workout__value--speed': 'speed',
    //   'workout__value--climb': 'climb',
    // };
    // // prettier-ignore
    // const workoutDetails = this.#workoutElem.querySelectorAll('.workout__value');

    // workoutDetails.forEach(detail => {
    //   for (const className in classToKeyMap) {
    //     if (detail.classList.contains(className)) {
    //       const key = classToKeyMap[className];
    //       detail.innerHTML = `<input class="form__input form__input--${key}" placeholder="${workoutJSON[key]}" />`;

    //       break; // Break the loop once we've found a matching class
    //     }
    //   }
    // });

    // –ü—Ä–∏–Ω—è—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ø–æ–ª–µ–π, –ø–æ–º–µ—Å—Ç–∏—Ç—å –∏—Ö –≤ workoutJSON –∏–ª–∏ workoutsJSON

    // —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage

    // –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  }

  _removeWorkout() {
    // We remove the ${this.#workoutElem.dataset.id} workout
  }

  //
  //
  //
  //

  _addWorkoutsToLocalStorage() {
    localStorage.setItem('workouts', JSON.stringify(this.#workouts));
  }

  _getLocalStorageData() {
    const data = JSON.parse(localStorage.getItem('workouts'));
    // console.log(data);

    if (!data) return;

    this.#workouts = data;

    this.#workouts.forEach(workout => {
      this._displayWorkoutOnSidebar(workout);
    });
  }

  reset() {
    localStorage.removeItem('workouts');
    location.reload();
  }
  // –∞ –≤—ã–∑–≤–∞—Ç—å reset() –º–æ–∂–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª–∏, –ø–∏—à–µ–º app.reset()
}

const app = new App();
